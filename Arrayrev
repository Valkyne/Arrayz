package lab1startercode;

import java.util.Arrays;
import java.util.Collections;

public class ArrayReview {

	public void labDemo1() {
			
		System.out.println("LAB 1 DEMO 1\n");
		
		//TODO:  declare and initialize an integer array with an initialization list.
		
		//TODO:  UNCOMMENT - WHY IS THIS A SYNTAX ERROR?
		//int [] integers = new int{41, 7, 11, 23, 5};
		
		//TODO:  print out the array using a regular for loop
		System.out.print("PRINT 1-D ARRAY USING REGULAR FOR LOOP\t\t");
		
		
		System.out.println();
		
		//TODO:  print out the array using an enhanced for loop - see Deitel chapter 7.7
		System.out.print("PRINT 1-D ARRAY USING ENHANCED FOR LOOP\t\t");
		
		
		System.out.println();
		
		//TODO:
		//search the array for an integer
		//use a method from class Arrays from the API:
		// use a selection structure to print out an appropriate message, pending the finding of the integer
		//https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html
		//see Deitel chapter 7.15
		
		
		System.out.println();
		
		//TODO:  sort the array by using a method from class Arrays from the API:
		//https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html
		//see Deitel chapter 7.15
		
		
		//TODO:  print out the sorted array
		
		
	}//end demo 1
	
	public void labDemo2() {
		
		System.out.println("LAB 1 DEMO 2\n");
		
		//TODO:  declare and instantiate a 2-D array of doubles but do not initialize it.  Use two rows and four columns.
		
		
		//alternatively - commit to the amount of rows only
		//double [][] doubles  = new double[2][];
		
		//TODO:  print out the 2-D array using a nested for loop - before non-trivial values are added
		System.out.println("\nPRINT 2-D ARRAY USING NESTED REGULAR FOR LOOP, VALUES NOT ADDED:");
				
			System.out.println();
		
		//TODO:  initialize the array with non-trivial values
			
		
		//TODO:  UNCOMMENT - WHY IS THIS A SYNTAX ERROR?
		//doubles = {{5.2, 81.3, 24, 3.0}, {11.3, 18.5, 16.1, 0.0}};
		
		//TODO:  print out the 2-D array using a nested for loop
		System.out.println("\nPRINT 2-D ARRAY USING NESTED REGULAR FOR LOOP, NON-TRIVIAL VALUES ADDED:");
		 
			
		//ONLY FOR FUN - NOT REQUIRED - NESTED ENHANCED FOR LOOP
			/*
		 * for(double [] row: doubles) { for(double column: row) {
		 * System.out.print(column +" "); } }
		 */
		
		System.out.println();
		
		//TODO:  sum and print out the sum of the elements of the 2-D array
		
		
	}//end demo 2
	
	public void labDemo3() {
		
		System.out.println("LAB 1 DEMO 3\n");
		
		//TODO:  declare a 1-D array of Strings
		
		
		//TODO:  print out the array using an enhanced for loop
		System.out.print("PRINT 1-D ARRAY USING ENHANCED FOR LOOP\t\t");
		
		
		System.out.println();
		
		//TODO:  find a method to change all characters to upper case and print out the array using an enhanced for loop
		System.out.print("\nPRINT UPPERCASE 1-D ARRAY USING REGULAR FOR LOOP:  ");
				
				
		System.out.println();
		
		//TODO:  find the longest String and print it out
		
					
	}//end demo 3
	
	public void labDemo4() {
		
		System.out.println("LAB 1 DEMO 4\n");
		
		//TODO:  declare a 1-D array of references of class Book 
		
		
		//TODO:  print out the array before adding any elements
		//refer to text figure 9.12 "hashCode"
		System.out.println("BOOK ARRAY BEFORE ADDING ELEMENTS:");
		
		
		System.out.println();
		
		//TODO:  initialize three books and add them to the array
		 
		  
		//TODO:  print out the array after adding elements
		  System.out.println("BOOK ARRAY AFTER ADDING ELEMENTS:");
		
		  
		  System.out.println();
		  
		//TODO:  set the second array element equal to null and try to print it out - IT WILL THROW AN EXCEPTION
		
		  
		  System.out.println();
		  
		//TODO:  set the second array element back to the non-trivial value
		  
		  
		  //TODO:  set the entire array to null
		 
		  
		  System.out.println("BOOK ARRAY AFTER SETTING ARRAY TO NULL:");
		 
		
	}
	
	public void labDemo5() {
		
		System.out.println("LAB 1 DEMO 5\n");
		
		/*TODO:  ADD THE FOLLOWING toString() METHOD TO THE Book CLASS
		 * 
		 * 		@Override
					public String toString() {
					return "Book Title:  " + title + " YearPublished:  " + yearPublished;
				}
		 */
		
		//TODO:  use one line of code to declare and initialize a Book array with three elements:
		
		
		//TODO:  print out the array elements - use an enhanced for loop - only pass the name of the enhanced for loop 'parameter' to the System.out.print() method
		System.out.println("BOOK ARRAY BY IMPLICITLY INVOKING toString():"); 
		
		
		System.out.println();
		
		//TODO:  print out the array elements - use an enhanced for loop - only pass the name of the 'parameter' to the System.out.print() method
		System.out.println("BOOK ARRAY BY EXPLICITLY INVOKING toString():");  
		
		
		System.out.println();
		  
		//TODO:  COMMENT OUT THE toString() METHOD THAT WAS ADDED TO THE Book CLASS
	    //print out the array elements - use an enhanced for loop - only pass the name of the 'parameter' to the System.out.print() method
		System.out.println("BOOK ARRAY BY IMPLICITLY INVOKING toString() WITH toString() COMMENTED OUT:"); 
		
	}
	
	public void labDemo6() {
		
		System.out.println("LAB 1 DEMO 6 \n");
		
		//TODO:  MAKE CERTAIN THAT toString() IN THE Book CLASS IS COMMENTED OUT
		
		//TODO:  use one line of code to declare and instantiate a Book array with three elements - do not initialize the individual elements:
		
		//TODO:  print out the array elements - use an enhanced for loop - only pass the name of the enhanced for loop 'parameter' to the System.out.print() method
		System.out.println("BOOK ARRAY BY IMPLICITLY INVOKING toString() WITH toString() IN THE Book CLASS COMMENTED OUT:"); 
		
		System.out.println();
		
		//TODO:  print out the array elements - use an enhanced for loop - only pass the name of the 'parameter' to the System.out.print() method
		  System.out.println("BOOK ARRAY BY EXPLICITLY INVOKING toString() WITH toString() IN THE Book CLASS COMMENTED OUT:"); 
		  
		  System.out.println();
		 
		//TODO:  UNCOMMENT toString() IN THE Book CLASS AND TRY TO RUN labDemo6() one more time - are the results different with toString() available?
		
		//TODO:  print out the array elements - use an enhanced for loop - only pass the name of the enhanced for loop 'parameter' to the System.out.print() method
		  System.out.println("BOOK ARRAY BY IMPLICITLY INVOKING toString() WITH toString() IN THE Book CLASS AVAILABLE:");
		  
		  
		  System.out.println();
		  
		  //TODO:  Add elements to array, make certain that toString() is available, and print
		
		  
		  System.out.println("INITIALIZED BOOK ARRAY, IMPLICITLY INVOKE toString() WITH toString() IN THE Book CLASS AVAILABLE:"); 
			
		
	}//end demo 6
}//end lab
